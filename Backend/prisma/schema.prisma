// This is your datasource and generator configuration
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS for Data Integrity ---
enum ReportStatus {
  IDLE
  QUEUED
  GENERATING
  COMPLETED
  FAILED
}

enum UploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// --- CORE MODELS ---
model User {
  id               String    @id @default(cuid())
  username         String    @unique
  email            String    @unique
  passwordHash     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // User's standard inventory/sales data
  uploads          Upload[]
  products         Product[]
  snapshots        InventorySnapshot[]
  sales            SalesDaily[]
  marketing        MarketingRecord[]
  variations       Variation[]

  // User's demand analysis data
  associatedAsins  CategoryAsin[]
  demandReports    DemandReport[]
}

// NEW: This model represents a global, shared category.
model GlobalCategory {
  id         String   @id @default(cuid())
  name       String
  url        String   @unique
  categoryId String   @unique // This line MUST exist
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  asins      CategoryAsin[]
  reports    DemandReport[]
}
// NEW: This model links a user, an ASIN, and a global category.
model CategoryAsin {
  id               String         @id @default(cuid())
  asin             String
  createdAt        DateTime       @default(now())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  globalCategory   GlobalCategory @relation(fields: [globalCategoryId], references: [id])
  globalCategoryId String

  @@unique([asin, globalCategoryId, userId])
  @@index([asin])
}

// UPDATED: This model is now linked to a GlobalCategory.
model DemandReport {
  id                String       @id @default(cuid())
  status            ReportStatus @default(QUEUED)
  progress          Int          @default(0)
  
  // Relations
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  globalCategoryId  String?
  globalCategory    GlobalCategory? @relation(fields: [globalCategoryId], references: [id])
  analytics         CategoryAnalytics?

  createdAt         DateTime     @default(now())
  completedAt       DateTime?

  @@index([userId, status])
}

// This model remains for storing discovered categories temporarily before global association.
model ProductCategory {
  id           String  @id @default(cuid())
  asin         String
  categoryName String
  categoryUrl  String
  isPrimary    Boolean @default(false)
  
  @@unique([asin, categoryUrl])
  @@index([asin])
}

model BestSellingAsin {
  id                  String   @id @default(cuid())
  categoryAnalyticsId String
  categoryAnalytics   CategoryAnalytics @relation(fields: [categoryAnalyticsId], references: [id], onDelete: Cascade)
  rank                Int
  asin                String
  title               String?
  imageUrl            String?
  price               Float?
  rating              Float?
  reviewsCount        Int?
  monthlySales        Int?
  monthlyRevenue      Float?
  
  @@index([categoryAnalyticsId])
}

model CategoryAnalytics {
  id                  String    @id @default(cuid())
  reportId            String    @unique
  report              DemandReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  summaryJson         Json?
  salesOverTimeJson   Json?
  brandMarketShareJson Json?
  bestSellingAsins    BestSellingAsin[]
}

// --- LEGACY & SUPPORTING MODELS (No changes needed) ---
model Product {
  id          String    @id @default(cuid())
  asin        String
  sku         String
  title       String?
  imageUrl    String?
  fbaQty      Int       @default(0)
  mfnQty      Int       @default(0)
  vendorQty   Int       @default(0)
  totalQty    Int       @default(0)
  lastUpdated DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, asin, sku])
  @@index([userId])
}

model Upload {
  id        String       @id @default(cuid())
  type      String
  dateStart DateTime?
  dateEnd   DateTime?
  filename  String?
  path      String?
  status    UploadStatus @default(PENDING)
  meta      Json?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, type])
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  otpHash   String
  expiresAt DateTime
  type      String
  
  @@index([email, type])
}

model InventorySnapshot {
  id        String   @id @default(cuid())
  asin      String
  sku       String
  date      DateTime
  fbaQty    Int      @default(0)
  mfnQty    Int      @default(0)
  vendorQty Int      @default(0)
  totalQty  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, asin, sku, date])
  @@index([userId, date])
}

model SalesDaily {
  id        String   @id @default(cuid())
  date      DateTime
  sku       String
  asin      String
  quantity  Int
  revenue   Float    @default(0)
  cost      Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date, sku])
}

model MarketingRecord {
  id           String   @id @default(cuid())
  date         DateTime
  level        String   @default("campaign")
  campaignName String?
  adGroupName  String?
  keyword      String?
  asin         String?
  sku          String?
  impressions  Int      @default(0)
  clicks       Int      @default(0)
  spend        Float    @default(0)
  orders       Int      @default(0)
  sales        Float    @default(0)
  ctr          Float    @default(0)
  cpc          Float    @default(0)
  acos         Float    @default(0)
  roas         Float    @default(0)
  marketplace  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, date])
  @@index([userId, campaignName, date])
  @@index([userId, asin, date])
}

model Variation {
  id        String          @id @default(cuid())
  name      String
  code      String?
  tags      String[]
  active    Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     VariationItem[]
  
  @@index([userId, name])
}

model VariationItem {
  id          String    @id @default(cuid())
  sku         String?
  asin        String?
  note        String?
  variationId String
  variation   Variation @relation(fields: [variationId], references: [id], onDelete: Cascade)
  
  @@index([variationId])
}
