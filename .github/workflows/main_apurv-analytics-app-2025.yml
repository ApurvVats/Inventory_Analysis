name: Build and Deploy Backend to Azure App Service

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'apurv-analytics-app-2025'
  NODE_VERSION: '20'
  BACKEND_DIRECTORY: 'Backend'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 1) Checkout Repository
        uses: actions/checkout@v4

      - name: 2) Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.BACKEND_DIRECTORY }}/package-lock.json

      - name: 3) Install Dependencies & Generate Prisma Client
        working-directory: ${{ env.BACKEND_DIRECTORY }}
        run: |
          npm install
          npx prisma generate

      - name: 4) Run Prisma Migrations
        working-directory: ${{ env.BACKEND_DIRECTORY }}
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: 5) Verify PM2 Configuration
        working-directory: ${{ env.BACKEND_DIRECTORY }}
        run: |
          echo "Checking for ecosystem.config.js..."
          if [ -f "ecosystem.config.js" ]; then
            echo "‚úÖ ecosystem.config.js found"
            cat ecosystem.config.js
          else
            echo "‚ùå ecosystem.config.js not found!"
            exit 1
          fi

      - name: 6) Upload Artifact (entire backend folder)
        uses: actions/upload-artifact@v4
        with:
          name: backend-app-package
          path: ${{ env.BACKEND_DIRECTORY }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: 1) Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-app-package
          path: ./release

      - name: 2) Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_DD0399AC79414F2D8524B3DCDB77A214 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_70F3721AED054CBA99744E8457234734 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_198C34FCABB4466E862601E08DB285F0 }}

      - name: 3) Verify Deployment Package
        working-directory: ./release
        run: |
          echo "Verifying deployment package contents..."
          echo "üìÅ Package.json exists: $([ -f package.json ] && echo "‚úÖ Yes" || echo "‚ùå No")"
          echo "üìÅ Server.js exists: $([ -f server.js ] && echo "‚úÖ Yes" || echo "‚ùå No")"
          echo "üìÅ Workers directory exists: $([ -d workers ] && echo "‚úÖ Yes" || echo "‚ùå No")"
          echo "üìÅ Ecosystem.config.js exists: $([ -f ecosystem.config.js ] && echo "‚úÖ Yes" || echo "‚ùå No")"
          echo "üìÅ Node_modules exists: $([ -d node_modules ] && echo "‚úÖ Yes" || echo "‚ùå No")"

      - name: 4) Install Production Dependencies
        working-directory: ./release
        run: |
          npm install --production
          npm list pm2 || npm install pm2

      - name: 5) Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ./release
          # üî• Removed startup-command, Azure will use "npm start" from package.json automatically

      - name: 6) Post-Deployment Verification
        run: |
          echo "üöÄ Deployment completed!"
          echo "üìã Startup command: npm start"
          echo "üìä Expected processes: web-server + demand-worker"
          echo "üåê App URL: ${{ steps.deploy-to-webapp.outputs.webapp-url }}"